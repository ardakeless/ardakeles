
package Bluejackgame;
import java.util.Random;
import java.util.Scanner;
public class Bluejackgame {
 private static final int DECK_SIZE = 40;
 private static final int PLAYER_DECK_SIZE = 10;
 private static final int HAND_SIZE = 4;
 private static final int BOARD_LIMIT = 9;
 private static final int TARGET_SCORE = 20;
 private int[] gameDeck;
 private int[] computerDeck;
 private int[] playerDeck;
 private int[] computerBoard;
 private int[] playerBoard;
 private int computerWins;
 private int playerWins;
 private Random random;
 private Scanner scanner;
 public Bluejackgame() {
 gameDeck = new int[DECK_SIZE];
 computerDeck = new int[PLAYER_DECK_SIZE];
 playerDeck = new int[PLAYER_DECK_SIZE];
 computerBoard = new int[BOARD_LIMIT];
 playerBoard = new int[BOARD_LIMIT];
 random = new Random();
 scanner = new Scanner(System.in);
 playGame();
 }
 private void initializeDecks() {
 for (int i = 0; i < DECK_SIZE; i++) {
 gameDeck[i] = i % 10 + 1;
 }
 shuffleDeck(gameDeck);
 for (int i = 0; i < HAND_SIZE; i++) {
 computerDeck[i] = gameDeck[i];
 playerDeck[i] = gameDeck[DECK_SIZE - 1 - i];
 }
 for (int i = HAND_SIZE; i < PLAYER_DECK_SIZE; i++) {
 int value;
 if (i < PLAYER_DECK_SIZE - 5) {
 value = random.nextInt(6) + 1;
 } else {
 value = random.nextDouble() < 0.8 ? random.nextInt(6) + 1 : 0;
 }
 computerDeck[i] = value;
 value = random.nextDouble() < 0.8 ? random.nextInt(6) + 1 : 0;
 playerDeck[i] = value;
 }
 shuffleDeck(computerDeck);
 shuffleDeck(playerDeck);
 }
 private void shuffleDeck(int[] deck) {
 for (int i = 0; i < deck.length; i++) {
 int randIndex = random.nextInt(deck.length);
 int temp = deck[i];
 deck[i] = deck[randIndex];
 deck[randIndex] = temp;
 }
 }
 private int drawCard(int[] deck) {
 int card = deck[0];
 shiftArrayLeft(deck);
 return card;
 }
 private void shiftArrayLeft(int[] array) {
 for (int i = 0; i < array.length - 1; i++) {
 array[i] = array[i + 1];
 }
 array[array.length - 1] = 0;
 }
 private int calculateScore(int[] board) {
 int sum = 0;
 for (int value : board) {
 sum += value;
 }
 return sum;
 }
 private void displayBoard(int[] board, int score) {
 System.out.println("Board: " + arrayToString(board));
 System.out.println("Score: " + score);
 }
 private String arrayToString(int[] array) {
 StringBuilder result = new StringBuilder("[");
 for (int i = 0; i < array.length; i++) {
 result.append(array[i]);
 if (i < array.length - 1) {
 result.append(", ");
 }
 }
 result.append("]");
 return result.toString();
 }
 private void playComputerTurn() {
 int drawnCard = drawCard(computerDeck);
 computerBoard[0] = drawnCard;
 int boardIndex = 1;
 while (calculateScore(computerBoard) < TARGET_SCORE && boardIndex < BOARD_LIMIT) {
 drawnCard = drawCard(computerDeck);
 computerBoard[boardIndex++] = drawnCard;
 }
 displayBoard(computerBoard, calculateScore(computerBoard));
 }
 private void playPlayerTurn() {
 int drawnCard = drawCard(playerDeck);
 playerBoard[0] = drawnCard;
 int boardIndex = 1;
 while (true) {
 displayBoard(playerBoard, calculateScore(playerBoard));
 System.out.println("Do you want to draw another card? (y/n): ");
 String userInput = scanner.nextLine().trim().toLowerCase();
 if ("n".equals(userInput)) {
 break;
 } else if ("y".equals(userInput)) {
 drawnCard = drawCard(playerDeck);
 playerBoard[boardIndex++] = drawnCard;
 if (calculateScore(playerBoard) >= TARGET_SCORE) {
 break;
 }
 } else {
 System.out.println("Invalid input. Please enter 'y' or 'n'.");
 }
 }
 }
 private void determineWinner() {
 int computerScore = calculateScore(computerBoard);
 int playerScore = calculateScore(playerBoard);
 if (computerScore > TARGET_SCORE || (playerScore <= TARGET_SCORE && playerScore > computerScore)) {
 System.out.println("Player wins the set!");
 playerWins++;
 } else if (playerScore > TARGET_SCORE || (computerScore <= TARGET_SCORE && computerScore > playerScore)) {
 System.out.println("Computer wins the set!");
 computerWins++;
 } else {
 System.out.println("The set is tied!");
 }
 }
 private void playGame() {
 System.out.println("Welcome to Bluejack!");
 while (playerWins < 3 && computerWins < 3) {
 initializeDecks();
 System.out.println("Player Wins: " + playerWins + " | Computer Wins: " + computerWins);
 playPlayerTurn();
 playComputerTurn();
 determineWinner();
 }
 if (playerWins == 3) {
 System.out.println("Player wins the game!");
 } else {
 System.out.println("Computer wins the game!");
 }
 scanner.close();
 }
 public static void main(String[] args) {
 new Bluejackgame();
 }
}
